#############################################################################################################################################################
# * @Version 1.0                                                                                                                                            #
# * @Date 2024-80-30                                                                                                                                        #
# * @Author MENG Zhaohui                                                                                                                                    #
# * @Affiliation Department of Computer Science, Hohai University, Nanjing, China.                                                                          #
#############################################################################################################################################################




#############################################################################################################################################################
##                                                                                                                                                         ##
##   DIFFERENT CONFIGURATIONS                                                                                                                              ##
##                                                                                                                                                         ##
#############################################################################################################################################################


###########################################################################################################################################
##   BEGIN COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################

###############
# MAIN DIR   ##主目录路径 (DIR_MAIN)，DIR_MAIN 定义了项目的根目录，具体使用哪个路径可以根据实际的环境（如 xian 或 qing）来选择
###############

# xian
# 需要改成自己文件的路径
DIR_MAIN = /home/m1/mtf/ProteinCpp2025_0109/

# qing
#DIR_MAIN = /home/hhcv/ProteinCpp2024/



###############
# INCLUDE    ##
###############
INCLUDE_C = -I/usr/include/
# -I 选项：-I 是编译器选项，用于告诉编译器在寻找头文件时，应该额外搜索的目录。
# 比如，当代码中有 #include <someheader.h> 这样的指令时，编译器会在指定的目录（这里是 /usr/include/）中查找 someheader.h
# /usr/include/：这是一个常见的系统目录，通常包含标准库的头文件，比如 C 标准库或系统相关的头文件。将这个目录加入到 -I 选项中，意味着编译器会在这个路径下寻找头文件。


###########################################################################################################################################
##   END   COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################


#############################################################################################################################################################
##                                                                                                                                                         ##
##   END OF DIFFERENT CONFIGURATIONS                                                                                                                       ##
##                                                                                                                                                         ##
#############################################################################################################################################################






#############################################################################################################################################################
##                                                                                                                                                         ##
##   COMMON CONFIGURATIONS                                                                                                                                 ##
##                                                                                                                                                         ##
#############################################################################################################################################################




###########################################################################################################################################
##   BEGIN COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################

###################
# define variable #
###################

# dir
# 定义了源代码目录 DIR_SRC 和对象文件目录 DIR_OBJ。
DIR_SRC = $(DIR_MAIN)src/
DIR_OBJ = $(DIR_MAIN)obj/


###########################################################################################################################################
##   END   COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################



###########################################################################################################################################
##   BEGIN COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################

###############################
# ProteinCpp2024              #
###############################
# all simulator dvnn files    #
# open files                  #
###############################
#####################################################################################################################
# new 2024                                                                                                          #
# /home/m1/ProteinCpp2024/                                                                                          #
#                        /qomdProtein2024                         : create by makefile                              #
#                        /QOMD_run_para_linux_2024.txt            : run para by copy & revise by user               #
#                        /cppCuda_run_para_linux_2024.txt         : run para by copy & revise by user               #
#                        /dict/                                                                                     #
#                            /hhmoPanel_linux.byte                : run para by copy & do not revise                #
#                        /doc/                                                                                      #
#                            /Script81_dvnn_guide.txt             : readme file                                     #
#                        /src/                                                                                      #
#                            /aBase.h                             : run code by copy & revise by user               #
#                            /aDir.h                              : run code by copy & revise by user               #
#                            /aDvnn.h                             : run code by copy & revise by user               #
#                            /aFuncListSim.h                      : run code by copy & revise by user               #
#                            /qomdProtein2024.cpp                 : run code by copy & revise by user               #
#                            /dvnnFunc.cpp                        : run code by copy & revise by user               #
#                        /obj/                                                                                      #
#                            /libQomd.a                           : run lib  by copy & do not revise                #
#                            /makefile                            : makefile by copy & revise by user               #
#                            /qomdProtein2024.o                   : create by makefile                              #
#                            /dvnnFunc.o                          : create by makefile                              #
#                        /InputData/                                                                                #
#                                  /proteinBag_1VII_linux.byte    : run data by copy & do not revise                #
#                        /OutputData/                                                                               #
#####################################################################################################################

###################
# define variable #这些都是定义生成的文件名
###################


# target
TARGET_BIN_2024 = $(DIR_MAIN)qomdProtein2024
# 定义了最终可执行文件的目标路径，这个变量指定了最终生成的可执行文件将被保存的完整路径。TARGET_BIN_2024=/home/m1/ProteinCpp2024/qomdProtein2024


# simulator dvnn header files
QOMD_SIM_DVNN_HEADER_FILES = $(DIR_SRC)aDir.h\
$(DIR_SRC)aBase.h\
$(DIR_SRC)aDvnn.h\
$(DIR_SRC)aFuncListSim.h
# 列出了模拟器 dvnn 项目的头文件。“\” 是行续字符，表示当前行未结束，下一行是其延续。这样可以在 Makefile 中将长列表分成多行书写，以提高可读性。



# simulator dvnn object files
QOMD_SIM_DVNN_OBJECT_FILES = $(DIR_OBJ)qomdProtein2024.o\
$(DIR_OBJ)dvnnFunc.o


#######################################################
# archive                                             #
# files (.cpp & .h.gch) wrapped to libQomd.a          #
#######################################################

# archive lib files  // this archive files could be copy to other directories or other computers
QOMD_ARCHIVE_LIB_FILES = $(DIR_OBJ)libQomd.a
# 进行归档文件（静态库），libQomd.a 通常包含了多个编译好的目标文件，经过打包很方便地复制到其他目录或计算机上，在不同项目或环境中重用。
# 在Unix-like系统中，静态库通常以lib为前缀，后跟库的名称，最后以.a为扩展名。
# 静态库的创建和使用能有效减少重复编译，促进代码共享和模块化。它可以被链接到其他程序中，提供共享的功能和代码，而不需要重新编译所有源代码。


###########################################################################################################################################
##   END COPY   ##    these commands to makefile of ProteinCpp2024                                                                       ##
###########################################################################################################################################





#######################################################
# MULTI targets in one makefile
# four optionals(targets) when run make
#######################################################
# Makefile 支持定义多个目标（targets），你可以在运行 make 命令时指定不同的目标，以便执行不同的任务。
# 比如，你可能有一个目标用于编译项目，另一个目标用于清理编译生成的文件，或者有不同的目标用于编译不同的版本。


.PHONY: sim2024 
# .PHONY 是 Makefile 中的一个特殊指令，用于声明伪目标（phony targets）。伪目标是指那些并不直接对应实际文件的目标。它们通常用来定义一些需要执行的命令，比如编译、清理等操作。
#.PHONY: sim2024 声明了一个伪目标 sim2024，保证了即使文件系统中存在同名文件，也不会影响 Makefile 的执行。
# .PHONY 声明过sim2024它为一个伪目标，这意味着它并不一定代表一个实际的文件，而是一个需要执行的任务。

# 3. 为什么使用伪目标？
# 防止文件名冲突：如果目标的名称和文件系统中的某个文件名相同，make 可能会认为该文件是最新的，从而跳过相应的命令。而使用 .PHONY 声明之后，即使存在同名文件，make 也会执行这个目标。
# 提高可读性和组织性：使用伪目标可以更好地组织 Makefile，使不同任务更容易管理。

# 4. 多目标的应用
# Makefile 中定义多目标后，你可以通过 make <target> 的方式来执行不同的任务。例如，make sim2024 将会执行与 sim2024 目标相关的所有指令。
# 在实际项目中，多目标的使用使得 Makefile 更加灵活，能够处理编译、测试、打包、部署等不同的任务。


###########################################################################################################################################
##   BEGIN COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################
sim2024: $(TARGET_BIN_2024)
#作用-依赖关系:
#这行代码建立了 sim2024 与 $(TARGET_BIN_2024) 之间的依赖关系。也就是说，在你执行 make sim2024 时，make 会首先检查 $(TARGET_BIN_2024) 目标是否已经生成。
#如果 $(TARGET_BIN_2024) 目标（即可执行文件）还未生成，make 会先执行生成它的规则，确保生成了这个文件，然后才会执行与 sim2024 相关的命令。
# 这种依赖关系在 Makefile 中是非常常见的，用于保证各个构建步骤按正确的顺序进行。
###########################################################################################################################################
##   END   COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################





###########################################################################################################################################
##   BEGIN COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################
# 这条规则告诉Makefile，当obj/qomdProtein2024.o或obj/dvnnFunc.o 或 任何头文件发生变化时，应该重新运行这条规则中的命令来重新编译和链接程序。
# 它依赖于 $(QOMD_SIM_DVNN_OBJECT_FILES) 和 $(QOMD_SIM_DVNN_HEADER_FILES)，并且检查他们是否最新。如果不是，make 会先重新生成这些文件。

$(TARGET_BIN_2024) : $(QOMD_SIM_DVNN_OBJECT_FILES) $(QOMD_SIM_DVNN_HEADER_FILES)
	g++ -o $(TARGET_BIN_2024) $(QOMD_SIM_DVNN_OBJECT_FILES) $(QOMD_ARCHIVE_LIB_FILES) $(INCLUDE_C)
# 1、依赖部分：
# $(TARGET_BIN_2024) 是这条规则的目标，即最终要生成的可执行文件。
# $(QOMD_SIM_DVNN_OBJECT_FILES) 是一个变量，包含了编译过程中需要链接的所有目标文件（.o文件）。
# $(QOMD_SIM_DVNN_HEADER_FILES) 是一个变量，包含了所有相关的头文件。虽然头文件本身不直接参与链接过程，但它们定义了函数原型和数据结构，对于编译器正确编译源文件是必需的。

# 2、命令部分：
# g++ 是GNU C++编译器，用于编译C++程序。
# -o $(TARGET_BIN_2024) 指定输出文件的名称，即最终的可执行文件。
# $(QOMD_SIM_DVNN_OBJECT_FILES) 是所有需要链接的目标文件列表。它们是编译过程中间产生的文件，包含了编译后的二进制代码。
# $(QOMD_ARCHIVE_LIB_FILES) 包含了要链接的静态库文件,libQomd.a。包含了预编译的目标文件，链接器会将这些静态库中的代码包含在最终的可执行文件中。
# $(INCLUDE_C) 可能是一个变量，包含了编译时需要包含的头文件目录或者其他的编译选项。在链接阶段，它可能用于确保编译器知道如何找到所需的头文件。

#########################################
# simulator dvnn object files (compile) #是在 Makefile 中一个典型的步骤，用于编译源文件（.cpp 文件）并生成对象文件（.o 文件）。对象文件是编译过程中产生的中间文件，它们包含了源代码的机器代码表示，之后会被链接成最终的可执行文件。
#########################################
# qomdProtein2024.cpp                   #对象文件的编译规则：这部分定义了如何从源代码 qomdProtein2024.cpp 和 dvnnFunc.cpp 编译出对应的对象文件 .o 文件。这些对象文件将用于链接生成最终的可执行文件。
# dvnnFunc.cpp                          #
#########################################
# 这条规则告诉Makefile，当qomdProtein2024.cpp 或 任何头文件发生变化时，应该重新运行这条规则中的命令来重新编译源文件。编译 qomdProtein2024.cpp 生成 qomdProtein2024.o

$(DIR_OBJ)qomdProtein2024.o : $(DIR_SRC)qomdProtein2024.cpp $(QOMD_SIM_DVNN_HEADER_FILES)
	g++ -c -w $(DIR_SRC)qomdProtein2024.cpp $(INCLUDE_C)
# 1、依赖部分：
# $(DIR_OBJ)qomdProtein2024.o 是这条规则的目标，即最终要生成的目标文件。
# $(DIR_SRC)qomdProtein2024.cpp 是源文件，即需要编译的C++代码。
# $(QOMD_SIM_DVNN_HEADER_FILES) 是一个变量，包含了所有相关的头文件。虽然头文件本身不直接参与编译过程，但它们定义了函数原型和数据结构，对于编译器正确编译源文件是必需的。

# 2、命令部分：
# g++ -c -w $(DIR_SRC)qomdProtein2024.cpp $(INCLUDE_C) 是编译命令。
# g++ 是GNU C++编译器，用于编译C++程序。
# -c 表示只编译不链接，即生成目标文件而不是可执行文件；-w 表示关闭所有警告信息，这在某些情况下可以避免编译过程中的干扰。
# $(DIR_SRC)qomdProtein2024.cpp 是源文件路径。
# $(INCLUDE_C) 可能是一个变量，包含了编译时需要包含的头文件目录或者其他的编译选项。


# 这条规则告诉Makefile，当dvnnFunc.cpp 或 任何头文件发生变化时，应该重新运行这条规则中的命令来重新编译源文件。编译 dvnnFunc.cpp 生成 dvnnFunc.o

$(DIR_OBJ)dvnnFunc.o : $(DIR_SRC)dvnnFunc.cpp $(QOMD_SIM_DVNN_HEADER_FILES)
	g++ -c -w $(DIR_SRC)dvnnFunc.cpp $(INCLUDE_C)

# 这段 Makefile 代码定义了两个规则，用于分别编译 qomdProtein2024.cpp 和 dvnnFunc.cpp 这两个源文件。每个规则都指定了源文件的依赖关系，以及编译生成对象文件所需的命令。
# 通过这种方式，Makefile 确保了在头文件或源文件发生变化时，相关的对象文件能够被及时重新生成，从而保持项目的正确性和一致性。
###########################################################################################################################################
##   END   COPY   ##    these commands to makefile of ProteinCpp2024                                                                     ##
###########################################################################################################################################