HH-QOMD : hohai quantitative oscillator molecular dynamics

2024-09-03
===============================
蛋白质模拟器概要
===============================
蛋白质静态坐标
PDB蛋白质数据库中获得的蛋白质数据是各个蛋白质的静态的原子坐标集合，比如蛋白质1VII，包含有596个原子，
从PDB网站下载的pdb文件（1vii.pdb）中主要存储的是596个原子的三维坐标。参考《书稿第2章蛋白质数据库PDB.pdf》。

蛋白质的运动本质
依据物理学的认知，蛋白质是一种由多个原子通过化学键组合在一起的生物大分子，具有特定的立体构象，具有特定的生物化学功能。
只要环境温度大于绝对0开尔文温度（大约-273摄氏度），蛋白质的每个原子就会处于运动状态，
由于化学键的相互作用，运动是受到约束的，在常温状态（25摄氏度为实验室温度，30-37摄氏度为生物体温度），
能够维持一定的立体构象，从而具有特定的功能。

实验观测的局限性
蛋白质本质上是处于运动状态的，但是目前的实验技术还不能够观测其具体的运动过程。
目前有飞秒摄影技术，能够拍摄光子的运动，但是还未见对生物大分子的拍摄报导。

分子动力学软件
分子动力学计算系统，起步于1970~80年代，目前比较知名的为amber系统，基于分子动力学的数值计算方法，
分析每个原子的受力，计算原子的运动轨迹，给出原子的瞬时坐标，属于计算物理和计算力学的分支。

qomd蛋白质模拟器-quantitative oscillator molecular dynamics
qomd蛋白质模拟器，是河海大学孟朝晖老师课题组开发的一种分子动力学蛋白质模拟软件系统，具有如下特点：
1 完全独立自主的系统，计算原理、数据结构、体系结构、代码实现，都是独立自主的，与其他分子动力学系统没有传承关系。
2 模拟参数可调的系统，分子动力学模拟系统的关键部分为分子力场的建模和参数设计，
qomd系统基于新设计的分子轨道和原子轨道建模，将原子相互作用的电荷力和弹性振子的震动频谱均进行参数化，可以动态调整。
可以根据观测目标的要求，进行不同参数条件下的动态模拟。

蛋白质模拟器运行方式和输出
qomd蛋白质模拟器是一个基于分子动力学计算，模拟蛋白质原子运动的软件包，初始时刻的各个原子坐标可以设定为与pdb文件（1vii.pdb）原子坐标一致，
然后模拟计算每个时刻（飞秒间隔，1飞秒为10的-15秒）每个原子的新的坐标位置，并输出该时刻的坐标。

动态点云数据
蛋白质模拟器输出的数据可以看作是一种动态点云数据，与激光扫描器获得的动态点云数据不同之处在于，
1 这些数据是软件模拟出来的，可控性强。
2 模拟器是参数可调的，模拟数据可以根据需要进行产生。

神经网络的角度（各位同学的工作）
在pytorch等成熟神经网络开发平台的基础上，可以设计各种不同类型的神经网络，作为蛋白质动态点云数据的观察器。
观察器的目的可以是多种多样的，这是各位同学的工作方向。

模拟器运行参数可调的科学意义
上述观察器的目的都可以指向一个共同的目标，[就是获得一组合适的模拟器运行参数]。
蛋白质模拟器得到的不是真实物质的真实状况，模拟器本质上是真实世界的近似，为了获得更好的近似效果，（比如蛋白质折叠过程的模拟），
需要对模拟器进行不断地调整，或者说，在基本算法和轨道建模的大框架确定的基础上，要根据实际的模拟效果，
不断地调整模拟参数（电荷系统和频谱系统），使得模拟效果接近真实世界。

模拟效果是指什么（各位同学的工作）
先举一例，比如长时间模拟运行的条件下，蛋白质是不是能够维持相对稳定的立体构象，
以及相对稳定的立体构象又是如何定义的（这就不是一个很简单的问题，还能牵引出许多别人没有考虑过的新问题），
我觉得这都是神经网络要完成的部分。

用于模拟的蛋白质数据包
目前先模拟一个单独的蛋白质，暂不考虑两个以上蛋白质之间的相互作用。
1vii蛋白质是一个比较知名的蛋白质（用于研究蛋白质折叠），
这个蛋白质的初始坐标数据以及相关的模拟运行参数都打包在一个数据包里（proteinBag_1VII_linux.byte）。
后续还要打包不同的蛋白质，形成一个数据集。

蛋白质模拟研究领域的认知进化
在90年代末期，大约1998年，科学界首次用分子动力学模拟软件模拟了一个小蛋白质（1vii，36氨基酸，596原子）的折叠过程，
从展开的肽链状态模拟折叠为大致的球型状态。
模拟蛋白质折叠过程，也是我这些年工作的主要目标，但是为什么又走回到了先做好一个真正独立自主的模拟器这条路上了。
今天太晚了，这个问题以后有时间再说。

总结
今天（2024-09-03）先总结一下，模拟器是做好了（2024-10-07完整实现），但仍然还是个半成品，
需要用各位同学设计的神经网络观测运行数据和训练调整模拟器参数，得到全成品的模拟器。


2024-09-05
===============================
蛋白质模拟器代码包
===============================
src\qomdProtein2024.cpp，是模拟器的运行样例。
其中含有打包在obj\libQomd.a中的函数和数据结构，知道如何调用即可。

void procedure_24102(FILE* fptr_writerecord_test_output)简介

PROCEDURE_STEP : proteinBag_1VII get from byte file <proteinBag_1VII_linux.byte>
void * proteinBag_1VII是蛋白质1VII的模拟数据包的头地址，所有的运行数据都在这里面，其中的主要数据部分从文件<proteinBag_1VII_linux.byte>中读取。

PROCEDURE_STEP : get qomdRunPara
运行参数InputPara * qomdRunPara从文件"cppCuda_run_para_linux_2024.txt"中读取。

PROCEDURE_STEP : reset qomdRunPara in proteinBag
运行参数InputPara * qomdRunPara送进蛋白质1VII的模拟数据包proteinBag_1VII。

PROCEDURE_STEP : reset CudaGridBlock
设置GPU运行参数，暂时不用，保留模块。

PROCEDURE_STEP : init osci data before run
在运行模拟器前，还要根据运行参数qomdRunPara初始化一些必要的数据，都在模拟数据包proteinBag_1VII里面。

PROCEDURE_STEP : init dvnn vertexList
DvnnAtomicVertexList* vertexList是一个独立于模拟数据包proteinBag_1VII的瞬时（当前时刻）原子数据包，
可以随时从模拟数据包proteinBag_1VII中copy数据出来，DvnnAtomicVertexList数据结构是可见的，可以在此基础上进一步写代码。

PROCEDURE_STEP : init dvnn timePointList
DvnnTimePointList* timePointList是另一个独立的动态点云（时间变化的）原子数据包，
从DvnnAtomicVertexList* vertexList数据包中copy数据出来。
通过函数dvnn_save_timePointList_listData_to_byte_file将数据输出到字节文件"time_point_linux.byte"里。
该字节文件的读写方法都代码可见。

PROCEDURE_STEP : qomd_femto_iterator set run method
模拟器可以有四种运行方案，由运行参数InputPara * qomdRunPara确定。

PROCEDURE_STEP : iterate
模拟器运行模块，循环运行，并且每一步都输出数据到vertexList和timePointList，并且写数据到文件"time_point_linux.byte"里。

PROCEDURE_STEP : output dvnn vertexList
结束模拟并输出数据到文件"dvnn_vertexList_2.txt"和"dvnn_vertexList_pdb_2.txt"。


void procedure_24103()简介
从文件"time_point_linux.byte"读取点云数据的样例。



2024-09-07
问题1：为什么只会运行procedure_24102(FILE* fptr_writerecord_test_output)函数，怎么样才能运行procedure_24103()函数？
答：运行入口在文件"QOMD_run_para_linux_2024.txt"中设置，程序运行该文件中的第一个RUN_PROCEDURE值。

问题2：在init dvnn vertexList步骤中输出的dvnn_vertexList_1.txt是proteinBag_1VII的瞬时（当前时刻）原子数据吗？
       既然是当前时刻，为什么运行的结果始终是相同的值？
答：DvnnAtomicVertexList* vertexList是一个独立于模拟数据包，存储瞬时数据，可以写到文件里，
dvnn_vertexList_1.txt就是初始的写出数据，运行结束后的写出数据在"dvnn_vertexList_2.txt"

问题3：qomd_femto_iterator set run method中，RUN_METHOD : 1 = COUVDW or 2 = ELCCOL，RUN_MODE   : 1 = SER    or 2 = PAR，各代表什么意思？
答：COUVDW 库伦力范德华力模型，ELCCOL电荷力碰撞力模型，SER串行模式，PAR并行模式。是模拟器内部的运行模式选择。这个先不必细究，随便选就可以。

问题4：iterate中为什么要输出round和temperature？（WRITE_FREQ数值越大，running time也会变大）
     （time_start的值在WRITE_FREQ不同时也不同，那又该怎么解释问题2？）
答：输出温度是从宏观角度观测运行是否正常，在300K范围附近波动都属于正常，WRITE_FREQ用来控制输出温度的频次，不必每一步都计算温度。

问题5：输出的dvnn_vertexList_2.txt中只有596个原子各自的坐标值，那么怎么体现不同时刻原子的位置坐标？
答：不同时刻原子的位置坐标，由DvnnTimePointList* timePointList负责提取和输出。





2024-10-08
===============================
procedure_24102 更新说明
===============================
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : proteinBag_1VII get from byte file <proteinBag_1VII_linux.byte>                                                //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1 将数据文件 "proteinBag_1VII_linux.byte" 或者 "proteinBag_1VII_win.byte" 中的数据读入数据包 void * proteinBag_1VII
  proteinBag_1VII 是蛋白质模拟运行数据包的头地址，具体结构不可见，但是有函数接口用于修改其中的参数和读出数据


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : init dvnn sliderList                                                                                           //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2 初始化一个参数调整数据块，DvnnSliderList 结构可见，是一个1600个滑块按钮 DvnnSlider，结构可见，可编程控制。
  每个DvnnSlider包含三个值，min=-1,act=0,max=+1,其中min,max固定不变，act在[-1,+1]之间变化调整。
  每个滑块按钮 DvnnSlider 相当于是一个规范化的单参数调节器。
  这个就是同学们自己设计的神经网络的调整对象，通过对这些参数的调整，改变蛋白质模拟器的运行效果。

  dvnn_reset_dvnnSliderList_by_random是一个例子，将1600个滑块act初始化为[-1,+1]之间的随机值。


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : get hhmoPanel from byte file                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3 将数据文件 "hhmoPanel_linux.byte" 或者 "hhmoPanel_win.byte" 中的数据读入数据包 void * hhmoPanel
  hhmoPanel 是参数调整操控板的头地址，具体结构不可见，修改其中的参数的途径是通过DvnnSliderList结构实现的。

  qomd_shell3_adjust_hhmoPanel_by_dvnnSliderList 函数用于将 DvnnSliderList 的数据转录给 hhmoPanel。

  hhmoPanel 中的参数结构比 DvnnSliderList 中的参数要复杂，但是主体也是1000多个[min,act,max]型的单参数调节器。
  hhmoPanel 中的参数编号与 DvnnSliderList 中的参数编号一致，但是不是都用到了，有些是空置保留。
  具体：  0~1040，电荷参数
       1101~1113，频谱参数
       1201~1213，频谱参数
       1301~1313，频谱参数
       1401~1413，频谱参数
  这些参数是实际使用的。也就是说，DvnnSliderList 结构中的参数，就修改这些，其他的没有作用。

  hhmoPanel 参数调整操控板中的基准参数是在文件 "hhmoPanel_linux.byte" 中预置好的，
  然后再根据参数调整数据块 DvnnSliderList 中的参数修订，获得实际运行的参数，
  也就是说，只要保存新的 DvnnSliderList 数据，就可以保留前次运行训练的成果，下次再接着用。


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : reset hhmo_para                                                                                                //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4 调整 proteinBag_1VII 蛋白质模拟运行数据包中的相关参数（电荷参数、频谱参数），
这个步骤的相关参数为什么没有固定在数据文件 "proteinBag_1VII_linux.byte" 中，思考一下。


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : get qomdRunPara                                                                                                //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5 将数据文件 "cppCuda_run_para_linux_2024.txt" 或者 "cppCuda_run_para_win_2024.txt" 中的数据读入数据块 InputPara * qomdRunPara
  这个文件是运行参数选项，可以自己修改，标记 do not modify 的就不要修改了。

PROTEIN_NAME        |         1VII                                              | not used, preserve, do not modify
GPU_DEVICE_NAME     |         970                                               | not used, preserve, do not modify
DATA_DIR            |         /home/m1/qomd2022/1VII/                           | not used, preserve, do not modify
RUN_START           |         1                                                 | 1 = START or 0 = CONTINUE, used, do not modify
PARA_ELEC           |         2                                                 | 1 = use qomd(old fixed para), 2 = use hhmo(new adjustable para), add 2024-10-70
PARA_FREQ           |         2                                                 | 1 = use qomd(old fixed para), 2 = use hhmo(new adjustable para), add 2024-10-70
RUN_MODE            |         1                                                 | 1 = SER or 2 = PAR or 3 = CUDA, could be modified, 1 or 2
RUN_METHOD          |         2                                                 | 1 = COUVDW or 2 = ELCCOL, could be modified, 1 or 2
RUN_GPU             |         1                                                 | 1 = one gpu or 2 = two gpus, not used, preserve, do not modify
RUN_ROUNDS          |         1000                                              | form 100 to 100000, used, could be modified
WRITE_FREQ          |         10                                                | write frequence, for compute temperature, could be modified
WRITE_MEDIUM_FREQ   |         10000                                             | write medium data files and pdb file, to protect run data when power off for servers, not used, preserve, do not modify
BOND_DEVI_RATIO     |         0.0435                                            | double bond_deviation_ratio = 0.0435;           qomd run para, used, do not modify
ANGLE_DEVI_RATIO    |         0.0435                                            | double angle_deviation_ratio = 0.0435;          qomd run para, used, do not modify
PLANE_DEVI_RATIO    |         0.0435                                            | double plane_deviation_ratio = 0.0435;          qomd run para, used, do not modify
DIHE_LIMIT_RATIO    |         0.0435                                            | double dihedral_ratio_LimitDeviation = 0.0435;  qomd run para, used, do not modify
DIHE_FLATTOP_RATIO  |         0.9                                               | double dihedral_ratio_FlattopDeviation = 0.9;   qomd run para, used, do not modify
END                 |                                                           |                                                          |

可以修改的选项为：
PARA_ELEC   ：电荷参数选项，1 = use qomd(旧的参数，固定，不能用hhmoPanel调整), 2 = use hhmo(新的，可以用hhmoPanel调整),
PARA_FREQ   ：频谱参数选项，1 = use qomd(旧的参数，固定，不能用hhmoPanel调整), 2 = use hhmo(新的，可以用hhmoPanel调整),
RUN_MODE    ：串行模式，并行模式，GPU模式（暂无），这里的串行、并行，不是物理并行，而是为适应GPU模式做的预备，本质上都是CPU串行。
RUN_METHOD  ：电荷力的计算方式，
                 1 = COUVDW 旧的计算方式，只适用于旧的电荷参数qomd，当采用这个模式时， PARA_ELEC选项不起作用，但PARA_FREQ还是有作用的。
                 2 = ELCCOL 新的计算方式，适用于旧的电荷参数qomd 以及新的电荷参数hhmo，就是说 PARA_ELEC选项起作用，PARA_FREQ也有作用的。
RUN_ROUNDS  ：运行步数
WRITE_FREQ  ：输出温度的频次

这里可以看到，（1）PARA_ELEC 与 RUN_METHOD 要有个配合，当 RUN_METHOD = 1 = COUVDW 时，PARA_ELEC 不起作用。
             （2）PARA_ELEC 和 PARA_FREQ 选 1 = use qomd 的时候，hhmoPanel 不起作用。
其他可以自由组合。


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : switch_ProteinPackage_Osci_Harmonic_by_HHMO                                                                    //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : switch_ProteinPackage_elccol_charge_by_vertex_hhmoCharge                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

6 这两个步骤，根据 PARA_ELEC 和 PARA_FREQ 选项，在 proteinBag_1VII 蛋白质模拟运行数据包中做参数切换。
  这两步操作过程不可见，不用任何修改。


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : reset CudaGridBlock                                                                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

7 设置GPU选项，暂无实际作用，但不要删除。


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURE_STEP : init osci data before run                                                                                      //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

8 运行初始化，不要修改。





持续更新中......